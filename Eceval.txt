( () () (
  	    
		(branch (label external-entry))
		read-eval-print-loop
		(perform (op initialize-stack))
		(perform (op prompt-for-input) (const ";;; EC-Eval input:"))
		(assign exp (op read))
		(assign env (op get-global-environment))
		(assign continue (label print-result))
		(goto (label eval-dispatch))
		
		
		print-result
		(test (op error?) (reg val))
		(branch (label signal-error))
		(perform (op print-stack-statistics))
		(perform (op announce-output) (const ";;; EC-Eval value:"))
		(perform (op user-print) (reg val))
		(goto (label read-eval-print-loop))

		eval-dispatch
		(test (op self-evaluating?) (reg exp))
		(branch (label ev-self-eval))
		(test (op variable?) (reg exp))
		(branch (label ev-variable))
		(test (op quoted?) (reg exp))
		(branch (label ev-quoted))
		(test (op assignment?) (reg exp))
		(branch (label ev-assignment))
		(test (op definition?) (reg exp))
		(branch (label ev-definition))
		(test (op if?) (reg exp))
		(branch (label ev-if))
		(test (op lambda?) (reg exp))
		(branch (label ev-lambda))
		(test (op begin?) (reg exp))
		(branch (label ev-begin))
		(test (op and?) (reg exp))
		(branch (label ev-and))
		(test (op or?) (reg exp))
		(branch (label ev-or))
		(test (op cond?) (reg exp))
		(branch (label ev-cond))
		(test (op let?) (reg exp))
		(branch (label ev-let))
        (test (op exit?) (reg exp))
        (branch (label exit))
		(test (op application?) (reg exp))
		(branch (label ev-application))
		(goto (label unknown-expression-type))

		ev-self-eval
		(assign val (reg exp))
		(goto (reg continue))

		ev-variable
		(assign val (op lookup-variable-value-base) (reg exp) (reg env))
		(goto (reg continue))

		ev-quoted
		(assign val (op text-of-quotation) (reg exp))
		(goto (reg continue))

		ev-lambda
		(assign unev (op lambda-parameters) (reg exp))
		(assign exp (op lambda-body) (reg exp))
		(assign val (op make-procedure) (reg unev) (reg exp) (reg env))
		(goto (reg continue))

		ev-application
		(save continue)
		(save env)
		(assign unev (op operands) (reg exp))
		(save unev)
		(assign exp (op operator) (reg exp))
		;(test (op symbol?) (reg exp))
		;(branch (label ev-symbol-exp))
		(assign continue (label ev-appl-did-operator))
		(goto (label eval-dispatch))

		;ev-symbol-exp
		;what to do when i have a symbol?!
		;(assign proc (op lookup-variable-value-base) (reg exp) (reg env))
		;(goto (label ev-appl-did-operation)) uncomment if inserting between these routiness

		ev-appl-did-operator
		(restore unev) ; the operands
		(restore env)
		(assign argl (op empty-arglist))
		(assign proc (reg val)) ; the operator
		(test (op no-operands?) (reg unev))
		(branch (label apply-dispatch))
		(save proc)

		ev-appl-operand-loop
		(save argl)
		(assign exp (op first-operand) (reg unev))
		(test (op last-operand?) (reg unev))
		(branch (label ev-appl-last-arg))
		(save env)
		(save unev)
		(assign continue (label ev-appl-accumulate-arg))
		(goto (label eval-dispatch))

		ev-appl-accumulate-arg
		(restore unev)
		(restore env)
		(restore argl)
		(assign argl (op adjoin-arg) (reg val) (reg argl))
		(assign unev (op rest-operands) (reg unev))
		(goto (label ev-appl-operand-loop))

		ev-appl-last-arg
		(assign continue (label ev-appl-accum-last-arg))
		(goto (label eval-dispatch))

		ev-appl-accum-last-arg
		(restore argl)
		(assign argl (op adjoin-arg) (reg val) (reg argl))
		(restore proc)
		(goto (label apply-dispatch))

		ev-appl-did-operator-lazy
		(restore unev)
		(restore env)
		(assign argl (reg unev))
		(assign proc (reg val))
		(goto (label apply-dispatch))
		
		apply-dispatch
		(test (op primitive-procedure?) (reg proc))
		(branch (label primitive-apply))
		(test (op compound-procedure?) (reg proc))
		(branch (label compound-apply))
		(test (op compiled-procedure?) (reg proc))(branch (label compiled-apply))
		(goto (label unknown-procedure-type))
		
		compiled-apply
		(restore continue)
		(assign val (op compiled-procedure-entry) (reg proc))
		(goto (reg val))

		primitive-apply
		(assign val (op apply-primitive-procedure) (reg proc) (reg argl))
		(test (op error?) (reg val))
		(branch (label signal-error))
		(restore continue)
		(goto (reg continue))

		compound-apply
		(assign unev (op procedure-parameters) (reg proc))
		(assign env (op procedure-environment) (reg proc))
		(assign env (op extend-environment-base) (reg unev) (reg argl) (reg env))
		(assign unev (op procedure-body) (reg proc))
		(goto (label ev-sequence))

		ev-begin
		(assign unev (op begin-actions) (reg exp))
		(save continue)
		(goto (label ev-sequence))

		ev-sequence
		(assign exp (op first-exp) (reg unev))
		(test (op last-exp?) (reg unev))
		(branch (label ev-sequence-last-exp))
		(save unev)
		(save env)
		(assign continue (label ev-sequence-continue))
		(goto (label eval-dispatch))

		ev-sequence-continue
		(restore env)
		(restore unev)
		(assign unev (op rest-exps) (reg unev))
		(goto (label ev-sequence))

		ev-sequence-last-exp
		(restore continue)
		(goto (label eval-dispatch))

		ev-if
		(save exp) ; save expression for later
		(save env)
		(save continue)
		(assign continue (label ev-if-decide))
		(assign exp (op if-predicate) (reg exp))
		(goto (label eval-dispatch)) ; evaluate the predicate

		ev-if-decide
		(restore continue)
		(restore env)
		(restore exp)
		(test (op true?) (reg val))
		(branch (label ev-if-consequent))

		ev-if-alternative
		(assign exp (op if-alternative) (reg exp))
		(goto (label eval-dispatch))

		ev-if-consequent
		(assign exp (op if-consequent) (reg exp))
		(goto (label eval-dispatch))

		ev-assignment
		(assign unev (op assignment-variable) (reg exp))
		(save unev) ; save variable for later
		(assign exp (op assignment-value) (reg exp))
		(save env)
		(save continue)
		(assign continue (label ev-assignment-1))
		(goto (label eval-dispatch)) ; evaluate the assignment value

		ev-assignment-1
		(restore continue)
		(restore env)
		(restore unev)
		(perform (op set-variable-value!-base) (reg unev) (reg val) (reg env))
		(assign val (const ok))
		(goto (reg continue))

		ev-definition
		(assign unev (op definition-variable) (reg exp))
		(save unev) ; save variable for later
		(assign exp (op definition-value) (reg exp))
		(save env)
		(save continue)
		(assign continue (label ev-definition-1))
		(goto (label eval-dispatch)) ; evaluate the definition value

		ev-definition-1
		(restore continue)
		(restore env)
		(restore unev)
		(perform (op define-variable!) (reg unev) (reg val) (reg env))
		(assign val (const ok))
		(goto (reg continue))

		ev-and
		(assign unev (op operands) (reg exp))
		(save continue)
		(save unev)
		(assign exp (op first-operand) (reg unev))
		(assign continue (label ev-and-loop))
		(goto (label eval-dispatch))

		ev-and-loop
		(restore unev)
		(test (op false?) (reg val))
		(branch (label short-circuit))
		(test (op null?) (reg unev))
		(branch (label end-loop))
		(assign unev (op rest-operands) (reg unev))
		(save unev)
		(assign exp (op first-operand) (reg unev))
		(goto (label eval-dispatch))

		ev-or
		(assign unev (op operands) (reg exp))
		(save continue)
		(save unev)
		(assign exp (op first-operand) (reg unev))
		(assign continue (label ev-or-loop))
		(goto (label eval-dispatch))

		ev-or-loop
		(restore unev)
		(test (op true?) (reg val))
		(branch (label short-circuit))
		(test (op null?) (reg unev))
		(branch (label end-loop))
		(assign unev (op rest-operands) (reg unev))
		(save unev)
		(assign exp (op first-operand) (reg unev))
		(goto (label eval-dispatch))

		end-loop
		short-circuit
		(restore continue)
		(goto (reg continue))

		ev-cond
		(assign unev (op operands) (reg exp))
		(save continue)
		(save unev)
		(assign exp (op first-operand) (reg unev))
		(assign exp (op cond-predicate) (reg exp))
		(assign continue (label ev-pred))
		(goto (label eval-dispatch))

		ev-pred
		(test (op true?) (reg val))
		(branch (label pred-true))
		(restore unev)
		(assign unev (op rest-operands) (reg unev))
		(save unev)
		(assign exp (op first-operand) (reg unev))
		(assign exp (op cond-predicate) (reg exp))
		(goto (label eval-dispatch))

		pred-true
		(restore unev)
		(assign exp (op first-operand) (reg unev))
		(assign exp (op rest-operands) (reg exp))
		(restore continue)
		(goto (label eval-dispatch))

		ev-let
		(assign proc (op let-pairs) (reg exp))
		(goto (label seperate-lists))

		seperated-lists
		(assign proc (op make-lambda) (reg argl) (reg proc))
		(assign exp (op cons) (reg proc) (reg unev))
		(goto (label eval-dispatch))

		seperate-lists
		(test (op null?) (reg proc))
		(branch (label seperated-lists)) 
		(assign val (op let-parameter) (reg proc))
		(assign argl (op adjoin-arg) (reg val) (reg argl))
		(assign val (op let-expression) (reg proc))
		(assign unev (op adjoin-arg) (reg val) (reg unev))
		(assign proc (op cdr) (reg proc))
		(goto (label seperate-lists))

		unknown-expression-type
		(assign val (const "unknown-exp-err"))
		(goto (label signal-error))

		unknown-procedure-type
		(restore continue) ; clean up stack (from apply-dispatch)
		(assign val (const "unknown-proc-err"))
		(goto (label signal-error))

		signal-error
		(assign val (op get-error-text) (reg val))
		(perform (op user-print) (reg val))
		(goto (label read-eval-print-loop))
	    
		external-entry
		(perform (op initialize-stack))
		(assign env (op get-global-environment))
		(assign continue (label print-result))
		(goto (reg val))

        exit
        ))